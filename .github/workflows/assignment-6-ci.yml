name: CI Assignment 6

on:
  push:
    branches: [test]

  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - "packages/assignment-6/**"
      - ".github/workflows/assignment-6-ci.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: |
          pnpm -F assignment-6 build 2>&1 | tee error.log
          exit ${PIPESTATUS[0]}

      - name: Comment PR
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const errorLog = fs.readFileSync('error.log', 'utf8')

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### tsc&build error ${errorLog}`
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: |
          pnpm -F assignment-6 lint 2>&1 | tee error.log
          exit ${PIPESTATUS[0]}

      - name: Lint Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs')
            const eslintReport = fs.readFileSync('error.log', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## ESLint Results

              ${eslintReport}
              `
            });
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Testing and Coverage
        run: |
          pnpm install
          pnpm -F assignment-6 test
          pnpm -F assignment-6 coverage

      - name: Comment Test Coverage
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');

            const coverage = JSON.parse(fs.readFileSync("packages/assignment-6/coverage/coverage-summary.json", 'utf8'));
            const totalCoverage = coverage.total;

            const coverageComment = `

            ## ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ ‚úÖ
            ### Ïª§Î≤ÑÎ¶¨ÏßÄ Í≤∞Í≥º

            - ÎùºÏù∏ Ïª§Î≤ÑÎ¶¨ÏßÄ: ${totalCoverage.lines.pct}%
            - Î∏åÎûúÏπò Ïª§Î≤ÑÎ¶¨ÏßÄ: ${totalCoverage.branches.pct}%
            - Ìï®Ïàò Ïª§Î≤ÑÎ¶¨ÏßÄ: ${totalCoverage.functions.pct}%
            - Íµ¨Î¨∏ Ïª§Î≤ÑÎ¶¨ÏßÄ: ${totalCoverage.statements.pct}%
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });

      - name: Comment Test Coverage on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const coverageComment = `
              ## ÌÖåÏä§Ìä∏ Ïã§Ìå® ‚ùå

              ÌÖåÏä§Ìä∏ ÏΩîÎìúÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.
            `
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });

  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Lighthouse CI
        run: |
          npm i -E -g @lhci/cli
          pnpm install
      - name: Build Local Server
        run: |
          pnpm -F assignment-6 build
          pnpm -F assignment-6 lighthouse
      - name: Report Lighthouse
        if: success()
        uses: actions/github-script@v6
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync("packages/assignment-6/lhci_reports/manifest.json", 'utf-8'))
            console.log(results)

            let comments = "";

            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const details = JSON.parse(fs.readFileSync(jsonPath))
              const { audits } = details;

              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );


              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                `| ${score(summary.accessibility)} Accessibility | ${
                  summary.accessibility
                } |`,
                `| ${score(summary['best-practices'])} Best practices | ${
                  summary['best-practices']
                } |`,
                `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                ''
              ].join('\n');

              const detail = [
                `üìä Lighthouse Detail`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits['first-contentful-paint'].score * 100
                )} First Contentful Paint | ${
                  audits['first-contentful-paint'].displayValue
                } |`,
                `| ${score(
                  audits['largest-contentful-paint'].score * 100
                )} Largest Contentful Paint | ${
                  audits['largest-contentful-paint'].displayValue
                } |`,
                `| ${score(
                  audits['total-blocking-time'].score * 100
                )} Total Blocking Time | ${audits['total-blocking-time'].displayValue} |`,
                `| ${score(
                  audits['cumulative-layout-shift'].score * 100
                )} Cumulative Layout Shift | ${
                  audits['cumulative-layout-shift'].displayValue
                } |`,
                `| ${score(audits['speed-index'].score * 100)} Speed Index | ${
                  audits['speed-index'].displayValue
                } |`,
              ].join('\n');

              comments += comment + "\n" + detail + "\n";
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comments
            });
